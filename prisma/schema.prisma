// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductCondition {
  A
  B
  C
}

enum ProductCategory {
  ROAD_BIKE
  MOUNTAIN_BIKE
  SPINNING_BIKE
  ELECTRIC_BIKE
  ELECTRIC_SCOOTER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  avatarPublicId  String?   // Cloudinary public_id for avatar
  phone           String?
  bio             String?
  location        String?
  role            String    @default("USER")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  soldProducts         Product[] @relation("Seller")
  boughtProducts       Product[] @relation("Buyer")
  favorites            Favorite[]
  views                View[]
  accounts             Account[]
  sessions             Session[]
  
  // Messaging relationships
  conversationsAsUser1 Conversation[] @relation("ConversationUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationUser2")
  sentMessages         Message[]
  
  // Transaction relationships
  soldTransactions     Transaction[] @relation("TransactionSeller")
  boughtTransactions   Transaction[] @relation("TransactionBuyer")
}

model Product {
  id                String          @id @default(cuid())
  brand             String
  model             String
  year              Int
  condition         ProductCondition
  category          ProductCategory
  description       String
  images            String[]        // Array of Cloudinary URLs
  imagePublicIds    String[]        // Array of Cloudinary public_ids
  purchasePrice     Float?          // PC - Admin only
  netSalePrice      Float?          // PV - Admin only
  distributionPrice Float?          // PD - Admin only
  publicPrice       Float           // PVP
  discount          Float?          // Optional discount percentage
  location          String?         // Admin only
  registrationDate  DateTime?       // Admin only
  entryDate         DateTime?       // Admin only
  exitDate         DateTime?        // Admin only
  deliveryDate     DateTime?        // Admin only
  tax              Float?           // 21% VAT - Admin only
  sold             Boolean         @default(false)
  paid             Boolean         @default(false)
  views            Int            @default(0)
  likes            Int            @default(0)
  
  // Relationships
  sellerId         String?
  seller           User?           @relation("Seller", fields: [sellerId], references: [id])
  buyerId          String?
  buyer            User?           @relation("Buyer", fields: [buyerId], references: [id])
  favorites        Favorite[]
  viewsRelation    View[]
  conversations    Conversation[]
  transactions     Transaction[]
  
  // Logistics and Invoice
  invoice          String?         // URL or path to invoice file
  logisticCompany  String?
  logisticInvoice  String?         // URL or path to logistics invoice

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([category])
  @@index([brand])
  @@index([condition])
}

// Transaction Model - Registro de pagos y ventas
model Transaction {
  id                String            @id @default(cuid())
  stripeSessionId   String            @unique
  stripePaymentIntentId String?
  productId         String
  sellerId          String
  buyerId           String
  amount            Int               // En centavos (ej: 15000 = €150.00)
  platformFee       Int               // Comisión de la plataforma en centavos
  currency          String            @default("eur")
  status            TransactionStatus @default(PENDING)
  
  // Invoice details
  invoiceNumber     String?           @unique
  invoiceUrl        String?
  taxAmount         Int?              // IVA en centavos
  
  // Metadata
  metadata          Json?             // Información adicional de Stripe
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  completedAt       DateTime?
  
  // Relationships
  product           Product           @relation(fields: [productId], references: [id])
  seller            User              @relation("TransactionSeller", fields: [sellerId], references: [id])
  buyer             User              @relation("TransactionBuyer", fields: [buyerId], references: [id])
  
  @@index([productId])
  @@index([sellerId])
  @@index([buyerId])
  @@index([status])
  @@index([createdAt])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model View {
  id        String   @id @default(cuid())
  userId    String?  // null para usuarios anónimos
  productId String
  ipAddress String?  // Para trackear usuarios anónimos
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([ipAddress, productId])
  @@index([productId])
}

// Messaging Models
model Conversation {
  id             String    @id @default(cuid())
  participant1Id String
  participant2Id String
  productId      String?   // Opcional: conversación sobre un producto específico
  lastMessageAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  participant1  User      @relation("ConversationUser1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2  User      @relation("ConversationUser2", fields: [participant2Id], references: [id], onDelete: Cascade)
  product       Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages      Message[]

  @@unique([participant1Id, participant2Id, productId])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([productId])
}

model Message {
  id             String      @id @default(cuid())
  content        String      @db.Text
  conversationId String
  senderId       String
  readAt         DateTime?
  createdAt      DateTime    @default(now())

  // Relationships
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
