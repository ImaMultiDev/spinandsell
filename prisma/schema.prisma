// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProductCondition {
  A
  B
  C
}

enum ProductCategory {
  ROAD_BIKE
  MOUNTAIN_BIKE
  SPINNING_BIKE
  ELECTRIC_BIKE
  ELECTRIC_SCOOTER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  bio           String?
  location      String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relationships
  soldProducts     Product[] @relation("Seller")
  boughtProducts   Product[] @relation("Buyer")
  favorites        Favorite[]
  accounts         Account[]
  sessions         Session[]
}

model Product {
  id                String          @id @default(cuid())
  brand             String
  model             String
  year              Int
  condition         ProductCondition
  category          ProductCategory
  description       String
  purchasePrice     Float?          // PC - Admin only
  netSalePrice      Float?          // PV - Admin only
  distributionPrice Float?          // PD - Admin only
  publicPrice       Float           // PVP
  discount          Float?          // Optional discount percentage
  location          String?         // Admin only
  registrationDate  DateTime?       // Admin only
  entryDate         DateTime?       // Admin only
  exitDate         DateTime?        // Admin only
  deliveryDate     DateTime?        // Admin only
  tax              Float?           // 21% VAT - Admin only
  sold             Boolean         @default(false)
  paid             Boolean         @default(false)
  views            Int            @default(0)
  likes            Int            @default(0)
  
  // Relationships
  sellerId         String?
  seller           User?           @relation("Seller", fields: [sellerId], references: [id])
  buyerId          String?
  buyer            User?           @relation("Buyer", fields: [buyerId], references: [id])
  favorites        Favorite[]
  
  // Logistics and Invoice
  invoice          String?         // URL or path to invoice file
  logisticCompany  String?
  logisticInvoice  String?         // URL or path to logistics invoice

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([category])
  @@index([brand])
  @@index([condition])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

// NextAuth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
