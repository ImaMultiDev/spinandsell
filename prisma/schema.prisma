generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  avatarPublicId       String?
  phone                String?
  bio                  String?
  location             String?
  role                 String         @default("USER")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  accounts             Account[]
  conversationsAsUser1 Conversation[] @relation("ConversationUser1")
  conversationsAsUser2 Conversation[] @relation("ConversationUser2")
  favorites            Favorite[]
  sentMessages         Message[]
  boughtProducts       Product[]      @relation("Buyer")
  soldProducts         Product[]      @relation("Seller")
  sessions             Session[]
  boughtTransactions   Transaction[]  @relation("TransactionBuyer")
  soldTransactions     Transaction[]  @relation("TransactionSeller")
  views                View[]
}

model Product {
  id                String           @id @default(cuid())
  brand             String
  model             String
  year              Int
  condition         ProductCondition
  category          ProductCategory
  description       String
  images            String[]
  imagePublicIds    String[]
  purchasePrice     Float?
  netSalePrice      Float?
  distributionPrice Float?
  publicPrice       Float
  discount          Float?
  location          String?
  registrationDate  DateTime?
  entryDate         DateTime?
  exitDate          DateTime?
  deliveryDate      DateTime?
  tax               Float?
  sold              Boolean          @default(false)
  paid              Boolean          @default(false)
  views             Int              @default(0)
  likes             Int              @default(0)
  sellerId          String?
  buyerId           String?
  invoice           String?
  logisticCompany   String?
  logisticInvoice   String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  conversations     Conversation[]
  favorites         Favorite[]
  buyer             User?            @relation("Buyer", fields: [buyerId], references: [id])
  seller            User?            @relation("Seller", fields: [sellerId], references: [id])
  transactions      Transaction[]
  viewsRelation     View[]

  @@index([category])
  @@index([brand])
  @@index([condition])
}

model Transaction {
  id                    String            @id @default(cuid())
  stripeSessionId       String            @unique
  stripePaymentIntentId String?
  productId             String
  sellerId              String
  buyerId               String
  amount                Int
  platformFee           Int
  currency              String            @default("eur")
  status                TransactionStatus @default(PENDING)
  invoiceNumber         String?           @unique
  invoiceUrl            String?
  taxAmount             Int?
  metadata              Json?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  completedAt           DateTime?
  buyer                 User              @relation("TransactionBuyer", fields: [buyerId], references: [id])
  product               Product           @relation(fields: [productId], references: [id])
  seller                User              @relation("TransactionSeller", fields: [sellerId], references: [id])

  @@index([productId])
  @@index([sellerId])
  @@index([buyerId])
  @@index([status])
  @@index([createdAt])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model View {
  id        String   @id @default(cuid())
  userId    String?
  productId String
  ipAddress String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@unique([ipAddress, productId])
  @@index([productId])
}

model Conversation {
  id             String    @id @default(cuid())
  participant1Id String
  participant2Id String
  productId      String?
  lastMessageAt  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  participant1   User      @relation("ConversationUser1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2   User      @relation("ConversationUser2", fields: [participant2Id], references: [id], onDelete: Cascade)
  product        Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([participant1Id, participant2Id, productId])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([productId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  conversationId String
  senderId       String
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProductCondition {
  A
  B
  C
}

enum ProductCategory {
  ROAD_BIKE
  MOUNTAIN_BIKE
  SPINNING_BIKE
  ELECTRIC_BIKE
  ELECTRIC_SCOOTER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
